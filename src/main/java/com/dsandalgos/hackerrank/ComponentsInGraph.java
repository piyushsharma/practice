package com.dsandalgos.hackerrank;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Queue;

/**
 * There are 2N values to represent nodes in a graph.
 * They are divided into two sets G and B. Each set has exactly N values.
 * Set G is represent by {G1, G2, ... ,Gn}. G can contain any value between 1 to N(inclusive).
 * Set B is represented by {B1, B2, ... ,Bn}. B can contain any value between N + 1 to 2N (inclusive).
 * Same value can be chosen any number of times.
 *
 * Here (G1,B1), (G2, B2), etc. represents the edges of the graph.
 *
 * Your task is to print the number of vertices in the smallest and the largest connected components of the graph.
 *
 * Note Single nodes should not be considered in the answer.
 *
 *
 * Input Format
 *
 * First line contains an integer .
 * Each of the next  lines contain two space-separated integers,  line contains  and .
 *
 * Output Format
 *
 * Print two space separated integers, the number of vertices in the smallest and the largest components.
 *
 * Sample Input
 *
 * 5
 * 1 6
 * 2 7
 * 3 8
 * 4 9
 * 2 6
 *
 * Sample Output
 *
 * 2 4
 *
 */
public class ComponentsInGraph {

	static class GraphNode {
		int x;
		List<GraphNode> neighbors;
		boolean visited;

		public GraphNode(int x) {
			this.x = x;
			this.neighbors = new ArrayList<>();
		}


	}


	static int[] componentsInGraph(int[][] gb) {

		Map<Integer, GraphNode> nodes = buildGraph(gb);
		int min = Integer.MAX_VALUE;
		int max = 0;


		for(GraphNode g : nodes.values()) {
			int curCount = 0;
			Queue<GraphNode> q = new LinkedList<>();
			q.add(g);

			while(!q.isEmpty()) {
				GraphNode poppedNode = q.remove();
				if(poppedNode.visited) {
					continue;
				}
				++curCount;
				poppedNode.visited = true;

				for(GraphNode neighbor : poppedNode.neighbors) {
					q.add(neighbor);
				}
			}
			if(curCount > max) {
				max = curCount;
			}
			if(curCount < min && curCount > 1) {
				min = curCount;
			}
		}

		return new int[]{min, max};
	}

	private static Map<Integer, GraphNode> buildGraph(int[][] gb) {

		Map<Integer, GraphNode> sg = new HashMap<>();
		for(int i = 0; i < gb.length; ++i) {
			int n1 = gb[i][0];
			int n2 = gb[i][1];

			GraphNode gn1 = sg.computeIfAbsent(n1, (v) -> new GraphNode(n1));
			GraphNode gn2 = sg.computeIfAbsent(n2, (v) -> new GraphNode(n2));

			gn1.neighbors.add(gn2);
			gn2.neighbors.add(gn1);
		}
		return sg;
	}


	static int[] componentsInGraphUsingUnionFind(int[][] gb) {

		int n = gb.length * 2;
		int[] sizes = new int[n+1];
		int[] parent = new int[n+1];

		for(int i = 1; i <= n; ++i) {
			sizes[i] = 1;
			parent[i] = i;
		}

		for(int i = 0; i < gb.length; ++i) {
			int n1 = gb[i][0];
			int n2 = gb[i][1];

			int p1 = findRootParent(n1, parent);
			int p2 = findRootParent(n2, parent);

			if(p1 == p2) continue;

//			System.out.println("----------------------------------------------------");
//			System.out.println("n1 = " + n1 + " n2 = " + n2
//				+ " p1 = " + p1 + " p2 = " + p2);

			if(sizes[p1] >= sizes[p2]) {
				parent[p2] = p1;
//				System.out.println("BEFORE: size p1 = " + sizes[p1] + " size p2 " + sizes[p2]);
				sizes[p1] += sizes[p2];
				sizes[p2] = 0;
//				System.out.println("AFTER: size p1 = " + sizes[p1] + " size p2 " + sizes[p2]);
			} else {
				parent[p1] = p2;
//				System.out.println("BEFORE: size p1 = " + sizes[p1] + " size p2 " + sizes[p2]);
				sizes[p2] += sizes[p1];
				sizes[p1] = 0;
//				System.out.println("AGTER: size p1 = " + sizes[p1] + " size p2 " + sizes[p2]);
			}
			System.out.println("----------------------------------------------------");
		}

		int min = Integer.MAX_VALUE;
		int max = 0;
		for(int i = 0; i < sizes.length; ++i) {
			if(sizes[i] > max) {
				max = sizes[i];
			}
			if(sizes[i] < min && sizes[i] > 1) {
				min = sizes[i];
			}
		}
		return new int[]{min, max};
	}

	private static int findRootParent(int n1, int[] parent) {
		if(parent[n1] == n1) {
			return n1;
		}

		return findRootParent(parent[n1], parent);
	}


//	private static final Scanner scanner = new Scanner(System.in);

	public static void main(String[] args) throws IOException {
//		BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));
//
//		int n = Integer.parseInt(scanner.nextLine().trim());
//
//		int[][] gb = new int[n][2];
//
//		for (int gbRowItr = 0; gbRowItr < n; gbRowItr++) {
//			String[] gbRowItems = scanner.nextLine().split(" ");
//
//			for (int gbColumnItr = 0; gbColumnItr < 2; gbColumnItr++) {
//				int gbItem = Integer.parseInt(gbRowItems[gbColumnItr].trim());
//				gb[gbRowItr][gbColumnItr] = gbItem;
//			}
//		}
//
//		int[] SPACE = componentsInGraph(gb);
//
//		for (int SPACEItr = 0; SPACEItr < SPACE.length; SPACEItr++) {
//			bufferedWriter.write(String.valueOf(SPACE[SPACEItr]));
//
//			if (SPACEItr != SPACE.length - 1) {
//				bufferedWriter.write(" ");
//			}
//		}
//
//		bufferedWriter.newLine();
//
//		bufferedWriter.close();

		int[][] gb = new int[][]{
			{158, 1154},
			{287, 1163},
			{262, 1087},
			{129, 1008},
			{294, 1075},
			{188, 1163},
			{180, 1114},
			{223, 1003},
			{259, 1167},
			{103, 1022},
			{159, 1034},
			{246, 1194},
			{56, 1212},
			{156, 1239},
			{213, 1228},
			{214, 1049},
			{195, 1136},
			{183, 1137},
			{148, 1175},
			{127, 1267},
			{189, 1033},
			{70, 1066},
			{235, 1146},
			{145, 1003},
			{113, 1310},
			{127, 1039},
			{220, 1220},
			{58, 1260},
			{129, 1040},
			{90, 1262},
			{227, 1107},
			{215, 1170},
			{33, 1118},
			{183, 1055},
			{90, 1146},
			{87, 1075},
			{273, 1242},
			{42, 1160},
			{116, 1182},
			{90, 1095},
			{191, 1058},
			{34, 1164},
			{142, 1258},
			{271, 1180},
			{259, 1256},
			{15, 1287},
			{24, 1074},
			{286, 1110},
			{153, 1178},
			{167, 1025},
			{149, 1056},
			{251, 1136},
			{79, 1175},
			{17, 1051},
			{115, 1074},
			{278, 1201},
			{133, 1012},
			{229, 1301},
			{8, 1037},
			{109, 1188},
			{191, 1284},
			{249, 1294},
			{36, 1177},
			{249, 1025},
			{62, 1336},
			{164, 1302},
			{297, 1055},
			{297, 1089},
			{231, 1099},
			{190, 1175},
			{1, 1278},
			{197, 1030},
			{274, 1251},
			{64, 1333},
			{75, 1183},
			{96, 1265},
			{160, 1086},
			{198, 1239},
			{34, 1305},
			{23, 1154},
			{286, 1219},
			{116, 1312},
			{241, 1093},
			{28, 1340},
			{208, 1270},
			{236, 1266},
			{82, 1199},
			{199, 1182},
			{271, 1119},
			{8, 1206},
			{171, 1307},
			{24, 1091},
			{91, 1084},
			{177, 1014},
			{127, 1013},
			{159, 1227},
			{45, 1079},
			{117, 1137},
			{134, 1041},
			{151, 1099},
			{50, 1041},
			{117, 1247},
			{237, 1268},
			{136, 1109},
			{39, 1225},
			{211, 1054},
			{103, 1201},
			{182, 1238},
			{235, 1261},
			{21, 1082},
			{103, 1269},
			{111, 1266},
			{116, 1284},
			{173, 1262},
			{67, 1292},
			{140, 1279},
			{251, 1195},
			{172, 1017},
			{190, 1289},
			{125, 1195},
			{151, 1016},
			{171, 1118},
			{179, 1178},
			{288, 1001},
			{233, 1078},
			{44, 1248},
			{153, 1310},
			{126, 1168},
			{35, 1171},
			{210, 1215},
			{237, 1269},
			{98, 1260},
			{196, 1272},
			{124, 1177},
			{139, 1035},
			{216, 1271},
			{34, 1076},
			{238, 1062},
			{89, 1217},
			{299, 1205},
			{149, 1174},
			{213, 1124},
			{109, 1187},
			{156, 1209},
			{225, 1083},
			{134, 1095},
			{151, 1296},
			{93, 1142},
			{232, 1185},
			{215, 1115},
			{150, 1305},
			{222, 1210},
			{45, 1170},
			{110, 1081},
			{222, 1138},
			{232, 1271},
			{238, 1113},
			{208, 1106},
			{180, 1088},
			{281, 1324},
			{35, 1224},
			{99, 1108},
			{90, 1241},
			{129, 1152},
			{89, 1212},
			{164, 1002},
			{271, 1124},
			{28, 1180},
			{92, 1049},
			{298, 1221},
			{149, 1154},
			{105, 1168},
			{281, 1172},
			{157, 1270},
			{282, 1169},
			{13, 1279},
			{272, 1150},
			{144, 1180},
			{274, 1321},
			{38, 1220},
			{127, 1328},
			{43, 1076},
			{151, 1310},
			{176, 1009},
			{110, 1177},
			{165, 1120},
			{139, 1272},
			{204, 1167},
			{45, 1145},
			{240, 1287},
			{66, 1171},
			{300, 1132},
			{97, 1170},
			{88, 1004},
			{262, 1123},
			{256, 1144},
			{27, 1150},
			{72, 1079},
			{249, 1333},
			{16, 1117},
			{91, 1027},
			{221, 1331},
			{11, 1128},
			{108, 1235},
			{159, 1243},
			{117, 1146},
			{65, 1097},
			{254, 1240},
			{33, 1112},
			{133, 1312},
			{291, 1096},
			{79, 1021},
			{261, 1096},
			{251, 1288},
			{66, 1264},
			{155, 1243},
			{152, 1038},
			{261, 1066},
			{51, 1047},
			{68, 1127},
			{106, 1023},
			{264, 1111},
			{246, 1132},
			{83, 1279},
			{89, 1174},
			{230, 1156},
			{168, 1015},
			{239, 1327},
			{60, 1185},
			{33, 1019},
			{242, 1144},
			{5, 1168},
			{233, 1042},
			{93, 1256},
			{23, 1064},
			{98, 1192},
			{163, 1267},
			{105, 1338},
			{54, 1126},
			{300, 1176},
			{137, 1162},
			{179, 1308},
			{146, 1092},
			{1, 1177},
			{76, 1129},
			{148, 1140},
			{156, 1148},
			{141, 1012},
			{30, 1071},
			{41, 1155},
			{96, 1311},
			{9, 1098},
			{293, 1254},
			{85, 1195},
			{73, 1241},
			{43, 1201},
			{132, 1039},
			{296, 1071},
			{212, 1079},
			{159, 1217},
			{255, 1181},
			{113, 1135},
			{97, 1164},
			{137, 1275},
			{97, 1062},
			{45, 1265},
			{50, 1333},
			{81, 1233},
			{189, 1188},
			{222, 1217},
			{294, 1221},
			{121, 1320},
			{127, 1266},
			{145, 1046},
			{199, 1249},
			{275, 1281},
			{130, 1028},
			{260, 1231},
			{292, 1005},
			{168, 1309},
			{81, 1150},
			{261, 1007},
			{232, 1320},
			{190, 1305},
			{63, 1262},
			{57, 1282},
			{118, 1284},
			{175, 1246},
			{93, 1185},
			{106, 1129},
			{179, 1033},
			{7, 1034},
			{196, 1323},
			{102, 1293},
			{78, 1001},
			{6, 1313},
			{48, 1248},
			{93, 1009},
			{71, 1051},
			{80, 1061},
			{18, 1059},
			{247, 1156},
			{248, 1068},
			{175, 1031},
			{263, 1278},
			{244, 1024},
			{95, 1147},
			{85, 1116},
			{167, 1176},
			{265, 1205},
			{67, 1283},
			{55, 1021},
			{95, 1126},
			{130, 1071},
			{162, 1031},
			{127, 1015},
			{283, 1299},
			{190, 1308},
			{264, 1109},
			{127, 1191},
			{24, 1077},
			{265, 1263},
			{199, 1296},
			{163, 1231},
			{183, 1261},
			{163, 1127},
			{238, 1136},
			{219, 1223},
			{169, 1014},
			{206, 1308},
			{182, 1014},
			{71, 1081},
			{77, 1247},
			{76, 1333},
			{124, 1101},
			{66, 1009},
			{157, 1249},
			{134, 1249},
			{288, 1067},
			{135, 1038},
			{209, 1301},
			{23, 1195},
			{19, 1134},
			{203, 1012},
			{178, 1340},
			{6, 1094},
			{211, 1143},
			{52, 1132},
			{109, 1258},
			{172, 1273},
			{254, 1134},
			{127, 1171},
			{230, 1006},
			{60, 1087},
			{262, 1160},
			{88, 1302},
			{101, 1053},
			{152, 1268},
			{7, 1304},
			{137, 1219},
			{156, 1287},
			{31, 1135},
			{200, 1274},
			{242, 1207},
			{146, 1124},
			{293, 1102},
			{54, 1008},
			{180, 1083},
			{70, 1076},
			{165, 1325},
			{261, 1011},
			{277, 1043},
			{234, 1024},
			{176, 1312},
			{274, 1302},
			{226, 1190},
			{257, 1047},
			{163, 1056},
			{13, 1188},
			{14, 1136},
			{13, 1178},
			{241, 1325},
			{269, 1125},
			{56, 1046},
			{93, 1328},
			{259, 1087},
			{267, 1213},
			{24, 1149},
			{181, 1030},
			{2, 1053},
			{67, 1177},
			{134, 1243},
			{25, 1140},
			{68, 1181},
			{220, 1056},
			{270, 1209},
			{190, 1187},
			{195, 1194},
			{15, 1007},
			{123, 1272},
			{76, 1149},
			{64, 1005},
			{3, 1178},
			{248, 1276},
			{265, 1260},
			{286, 1092},
			{7, 1196},
			{62, 1188},
			{233, 1182},
			{61, 1045},
			{194, 1187},
			{12, 1251},
			{148, 1035},
			{19, 1125},
			{215, 1161},
			{45, 1080},
			{219, 1231},
			{286, 1218},
			{231, 1004},
			{169, 1204},
			{7, 1165},
			{32, 1324},
			{54, 1043},
			{104, 1043},
			{208, 1202},
			{101, 1226},
			{222, 1175},
			{274, 1298},
			{152, 1018},
			{161, 1174},
			{233, 1340},
			{118, 1064},
			{273, 1322},
			{44, 1252},
			{223, 1229},
			{35, 1052},
			{47, 1333},
			{28, 1115},
			{175, 1007},
			{226, 1124},
			{99, 1004},
			{38, 1298},
			{225, 1222},
			{26, 1214},
			{153, 1337},
			{181, 1160},
			{111, 1218},
			{206, 1134},
			{223, 1199},
			{241, 1073},
			{257, 1248},
			{98, 1109},
			{248, 1192},
			{10, 1291},
			{278, 1171},
			{55, 1025},
			{218, 1314},
			{263, 1070},
			{70, 1195},
			{298, 1030},
			{296, 1243},
			{223, 1008},
			{290, 1206},
			{69, 1031},
			{205, 1093},
			{199, 1266},
			{150, 1105},
			{207, 1195},
			{134, 1011},
			{230, 1045},
			{116, 1247},
			{286, 1312},
			{128, 1318},
			{88, 1306},
			{295, 1187},
			{56, 1120},
			{248, 1253},
			{47, 1174},
			{161, 1165},
			{235, 1131},
			{178, 1269},
			{149, 1031},
			{128, 1237},
			{8, 1170},
			{118, 1213},
			{188, 1245},
			{77, 1296},
			{13, 1067},
			{254, 1167},
			{37, 1045},
			{112, 1169},
			{231, 1086},
			{34, 1189},
			{229, 1070},
			{114, 1057},
			{297, 1001},
			{62, 1042},
			{143, 1331},
			{191, 1195},
			{14, 1233},
			{204, 1319},
			{268, 1207},
			{92, 1217},
			{227, 1320},
			{243, 1298},
			{18, 1305},
			{174, 1293},
			{151, 1129},
			{169, 1078},
			{226, 1020},
			{85, 1189},
			{13, 1271},
			{66, 1160},
			{177, 1280},
			{47, 1136},
			{73, 1074},
			{219, 1303},
			{34, 1287},
			{198, 1302},
			{220, 1192},
			{32, 1326},
			{155, 1164},
			{77, 1084},
			{212, 1233},
			{162, 1057},
			{144, 1283},
			{47, 1241},
			{240, 1207},
			{290, 1299},
			{203, 1200},
			{175, 1182},
			{230, 1227},
			{48, 1003},
			{3, 1180},
			{274, 1299},
			{148, 1330},
			{117, 1027},
			{52, 1127},
			{188, 1009},
			{241, 1254},
			{41, 1256},
			{104, 1333},
			{252, 1074},
			{203, 1138},
			{125, 1164},
			{282, 1180},
			{163, 1043},
			{259, 1209},
			{134, 1179},
			{101, 1155},
			{73, 1053},
			{35, 1192},
			{149, 1141},
			{33, 1206},
			{148, 1332},
			{100, 1131},
			{161, 1194},
			{47, 1128},
			{87, 1107},
			{288, 1052},
			{84, 1086},
			{292, 1072},
			{208, 1115},
			{38, 1256},
			{242, 1089},
			{10, 1160},
			{254, 1051},
			{101, 1252},
			{204, 1165},
			{66, 1137},
			{272, 1181},
			{145, 1313},
			{267, 1231},
			{223, 1157},
			{217, 1304},
			{17, 1061},
			{107, 1086},
			{30, 1003},
			{146, 1208},
			{74, 1136},
			{164, 1215},
			{156, 1163},
			{218, 1114},
			{134, 1219},
			{252, 1262},
			{172, 1311},
			{285, 1137},
			{134, 1100},
			{226, 1332},
			{270, 1336},
			{277, 1298},
			{45, 1192},
			{120, 1002},
			{272, 1123},
			{52, 1272},
			{74, 1252},
			{279, 1133},
			{285, 1280},
			{273, 1069},
			{186, 1269},
			{14, 1032},
			{285, 1166},
			{151, 1067},
			{92, 1320},
			{99, 1024},
			{271, 1172},
			{48, 1112},
			{187, 1175},
			{246, 1088},
			{279, 1258},
			{79, 1178},
			{12, 1285},
			{192, 1213},
			{220, 1178},
			{66, 1136},
			{109, 1150},
			{241, 1168},
			{123, 1004},
			{5, 1315},
			{239, 1185},
			{69, 1267},
			{293, 1130},
			{13, 1290},
			{197, 1032},
			{59, 1160},
			{57, 1213},
			{250, 1191},
			{27, 1212},
			{298, 1009},
			{68, 1310},
			{154, 1119},
			{88, 1289},
			{2, 1033},
			{216, 1322},
			{127, 1174},
			{64, 1094},
			{77, 1097},
			{186, 1271},
			{133, 1236},
			{158, 1340},
			{296, 1232},
			{64, 1324},
			{230, 1202},
			{87, 1090},
			{218, 1292},
			{291, 1172},
			{132, 1003},
			{37, 1264},
			{296, 1295},
			{182, 1232},
			{71, 1091},
			{121, 1321},
			{187, 1155},
			{149, 1289},
			{8, 1047},
			{186, 1014},
			{112, 1182},
			{206, 1222},
			{126, 1195},
			{96, 1278},
			{159, 1295},
			{24, 1044},
			{205, 1247},
			{273, 1285},
			{209, 1167},
			{83, 1013},
			{158, 1227},
			{127, 1200},
			{54, 1132},
			{26, 1240},
			{9, 1122},
			{61, 1140},
			{192, 1002},
			{173, 1241},
			{151, 1039},
			{57, 1067},
			{58, 1297},
			{23, 1098},
			{216, 1131},
			{109, 1309},
			{249, 1208},
			{201, 1307},
			{95, 1196},
			{103, 1340},
			{59, 1261},
			{149, 1118},
			{121, 1278},
			{263, 1224},
			{239, 1138},
			{168, 1179},
			{293, 1288},
			{37, 1320},
			{70, 1058},
			{292, 1230},
			{18, 1092},
			{60, 1036},
			{121, 1286},
			{63, 1156},
			{83, 1264},
			{263, 1117},
			{269, 1253},
			{30, 1017},
			{295, 1042},
			{8, 1116},
			{218, 1092},
			{11, 1069},
			{111, 1193},
			{169, 1114},
			{12, 1090},
			{83, 1311},
			{235, 1193},
			{169, 1013},
			{49, 1130},
			{13, 1241},
			{241, 1279},
			{93, 1094},
			{181, 1316},
			{161, 1055},
			{164, 1182},
			{236, 1298},
			{284, 1203},
			{202, 1091},
			{74, 1199},
			{118, 1141},
			{124, 1130},
			{200, 1022},
			{66, 1294},
			{282, 1194},
			{216, 1263},
			{78, 1114},
			{23, 1011},
			{172, 1196},
			{110, 1010},
			{186, 1026},
			{295, 1330},
			{295, 1319},
			{146, 1160},
			{228, 1189},
			{125, 1084},
			{248, 1325},
			{101, 1325},
			{259, 1295},
			{152, 1052},
			{274, 1273},
			{127, 1305},
			{300, 1154},
			{25, 1178},
			{48, 1264},
			{265, 1328},
			{197, 1215},
			{133, 1127},
			{126, 1318},
			{208, 1150},
			{55, 1243},
			{81, 1143},
			{191, 1206},
			{296, 1132},
			{93, 1170},
			{240, 1026},
			{188, 1115},
			{213, 1076},
			{238, 1039},
			{116, 1315},
			{200, 1048},
			{213, 1125},
			{134, 1329},
			{261, 1284},
			{271, 1141},
			{193, 1093},
			{298, 1108},
			{297, 1172},
			{8, 1003},
			{120, 1058},
			{116, 1278},
			{251, 1188},
			{34, 1220},
			{63, 1277},
			{296, 1059},
			{76, 1095},
			{174, 1064},
			{276, 1158},
			{154, 1098},
			{72, 1205},
			{203, 1178},
			{153, 1025},
			{290, 1045},
			{238, 1104},
			{61, 1317},
			{10, 1215},
			{61, 1253},
			{180, 1010},
			{83, 1068},
			{289, 1151},
			{167, 1187},
			{20, 1177},
			{213, 1106},
			{199, 1021},
			{163, 1204},
			{98, 1111},
			{231, 1186},
			{130, 1183},
			{41, 1078},
			{44, 1134},
			{176, 1132},
			{89, 1279},
			{109, 1085},
			{264, 1081},
			{175, 1070},
			{58, 1079},
			{85, 1075},
			{141, 1337},
			{129, 1049},
			{156, 1236},
			{15, 1076},
			{278, 1317},
			{257, 1045},
			{218, 1154},
			{216, 1251},
			{258, 1086},
			{179, 1004},
			{74, 1127},
			{218, 1127},
			{78, 1144},
			{114, 1087},
			{230, 1255},
			{39, 1031},
			{270, 1275},
			{94, 1192},
			{75, 1291},
			{280, 1182},
			{125, 1339},
			{55, 1315},
			{173, 1023},
			{59, 1076},
			{232, 1005},
			{28, 1061},
			{172, 1302},
			{170, 1071},
			{107, 1212},
			{172, 1232},
			{290, 1017},
			{97, 1214},
			{16, 1084},
			{53, 1112},
			{239, 1212},
			{44, 1330},
			{194, 1214},
			{260, 1151},
			{108, 1032},
			{299, 1060},
			{63, 1030},
			{281, 1090},
			{49, 1232},
			{55, 1180},
			{243, 1131},
			{218, 1146},
			{78, 1133},
			{80, 1082},
			{59, 1035},
			{76, 1105},
			{293, 1145},
			{173, 1007},
			{246, 1157},
			{39, 1110},
			{258, 1031},
			{242, 1096},
			{115, 1309},
			{60, 1177},
			{90, 1309},
			{19, 1060},
			{181, 1316},
			{218, 1112},
			{225, 1125},
			{118, 1257},
			{118, 1197},
			{36, 1254},
			{169, 1094},
			{253, 1083},
			{116, 1180},
			{230, 1325},
			{152, 1324},
			{81, 1180},
			{132, 1067},
			{288, 1232},
			{141, 1150},
			{217, 1141},
			{62, 1292},
			{9, 1025},
			{288, 1315},
			{97, 1236},
			{221, 1136},
			{137, 1005},
			{58, 1177},
			{15, 1296},
			{113, 1220},
			{64, 1242},
			{274, 1097},
			{225, 1116},
			{260, 1318},
			{285, 1168},
			{6, 1039},
			{25, 1280},
			{265, 1193},
			{156, 1204},
			{247, 1075},
			{279, 1003},
			{174, 1110},
			{152, 1116},
			{140, 1292},
			{75, 1195},
			{89, 1052},
			{209, 1245},
			{263, 1184},
			{29, 1068},
			{290, 1265},
			{235, 1020},
			{144, 1034},
			{262, 1269},
			{279, 1330},
			{257, 1034},
			{69, 1123},
			{14, 1325},
			{182, 1003},
			{47, 1328},
			{256, 1278},
			{229, 1240},
			{231, 1056},
			{193, 1292},
			{252, 1301},
			{196, 1175},
			{152, 1005},
			{94, 1210},
			{240, 1269},
			{70, 1004},
			{295, 1131},
			{110, 1299},
			{50, 1193},
			{297, 1208},
			{300, 1089},
			{124, 1293},
			{2, 1136},
			{257, 1230},
			{40, 1324},
			{216, 1081},
			{32, 1150},
			{216, 1091},
			{114, 1288},
			{42, 1004},
			{34, 1311},
			{236, 1208},
			{282, 1013},
			{45, 1295},
			{175, 1089},
			{7, 1246},
			{13, 1314},
			{17, 1003},
			{161, 1021},
			{87, 1115},
			{87, 1193},
			{6, 1206},
			{148, 1105},
			{92, 1122},
			{289, 1085},
			{99, 1075},
			{57, 1185},
			{60, 1139},
			{284, 1271},
			{224, 1082},
			{252, 1281},
			{138, 1036},
			{224, 1250},
			{160, 1298},
			{114, 1037},
			{163, 1157},
			{149, 1070},
			{223, 1065},
			{203, 1185},
			{208, 1257},
			{197, 1333},
			{45, 1115},
			{65, 1325},
			{231, 1091},
			{148, 1065},
			{73, 1227},
			{280, 1211},
			{1, 1298},
			{203, 1283},
			{116, 1273},
			{60, 1316},
			{245, 1005},
			{281, 1288},
			{31, 1162},
			{62, 1271},
			{100, 1080},
			{293, 1106},
			{128, 1324},
			{239, 1182},
			{179, 1169},
			{98, 1007},
			{22, 1235}
		};
		// ^^ 2, 611

		int[][] gb1 = new int[][]{
			{1, 17},
			{5, 13},
			{7, 12},
			{5, 17},
			{5, 12},
			{2, 17},
			{1, 18},
			{8, 13},
			{2, 15},
			{5, 20}
		};
		// ^^ 11, 11

		int[] result = componentsInGraphUsingUnionFind(gb);
		System.out.println("Done");
	}
}
